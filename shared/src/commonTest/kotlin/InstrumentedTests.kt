import androidx.compose.runtime.Composable
import androidx.compose.ui.test.ExperimentalTestApi
import androidx.compose.ui.test.assertHeightIsAtLeast
import androidx.compose.ui.test.assertIsDisplayed
import androidx.compose.ui.test.hasText
import androidx.compose.ui.test.isDisplayed
import androidx.compose.ui.test.isNotDisplayed
import androidx.compose.ui.test.onNodeWithContentDescription
import androidx.compose.ui.test.onNodeWithTag
import androidx.compose.ui.test.onNodeWithText
import androidx.compose.ui.test.performClick
import androidx.compose.ui.test.runComposeUiTest
import androidx.compose.ui.test.waitUntilDoesNotExist
import androidx.compose.ui.test.waitUntilExactlyOneExists
import androidx.compose.ui.unit.dp
import at.asitplus.wallet.app.common.BuildContext
import at.asitplus.wallet.app.common.KeystoreService
import at.asitplus.wallet.app.common.PlatformAdapter
import at.asitplus.wallet.app.common.WalletCryptoService
import at.asitplus.wallet.app.common.WalletMain
import at.asitplus.wallet.idaustria.IdAustriaScheme
import at.asitplus.wallet.lib.agent.ClaimToBeIssued
import at.asitplus.wallet.lib.agent.CredentialToBeIssued
import at.asitplus.wallet.lib.agent.IssuerAgent
import at.asitplus.wallet.lib.agent.toStoreCredentialInput
import compose_wallet_app.shared.generated.resources.Res
import compose_wallet_app.shared.generated.resources.button_label_accept
import compose_wallet_app.shared.generated.resources.button_label_consent
import compose_wallet_app.shared.generated.resources.button_label_continue
import compose_wallet_app.shared.generated.resources.button_label_details
import compose_wallet_app.shared.generated.resources.button_label_start
import compose_wallet_app.shared.generated.resources.content_description_portrait
import compose_wallet_app.shared.generated.resources.section_heading_age_data
import data.storage.DummyDataStoreService
import data.storage.PersistentSubjectCredentialStore
import io.ktor.client.HttpClient
import io.ktor.client.call.body
import io.ktor.client.request.post
import io.ktor.client.request.setBody
import io.ktor.http.ContentType
import io.ktor.http.contentType
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.runBlocking
import kotlinx.datetime.Clock
import kotlinx.serialization.Serializable
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.jsonObject
import kotlinx.serialization.json.jsonPrimitive
import org.jetbrains.compose.resources.getString
import ui.navigation.NavigatorTestTags
import ui.navigation.Routes.OnboardingWrapperTestTags
import ui.views.OnboardingStartScreenTestTag
import kotlin.test.Test
import kotlin.time.Duration.Companion.minutes

// Modified from https://developer.android.com/jetpack/compose/testing
@OptIn(ExperimentalTestApi::class)
class InstrumentedTests {

    @Test
    fun givenNewAppInstallation_whenStartingApp_thenAppActuallyStarts() = runComposeUiTest() {

        // Start the app
        setContent {
            val dummyDataStoreService = DummyDataStoreService()
            val ks = KeystoreService(dummyDataStoreService)
            val walletMain = WalletMain(
                cryptoService = ks.let { runBlocking { WalletCryptoService(it.getSigner()) } },
                dataStoreService = dummyDataStoreService,
                platformAdapter = getPlatformAdapter(),
                scope =  CoroutineScope(Dispatchers.Default),
                buildContext = BuildContext(
                    buildType = "debug",
                    versionCode = 0,
                    versionName = "0.0.0",
                )
            )
            App(walletMain)
        }

        onNodeWithTag(AppTestTags.rootScaffold)
            .assertIsDisplayed()
    }


    @Test
    fun givenNewAppInstallation_whenStartingApp_thenShowsOnboardingStartScreen() = runComposeUiTest() {
        // Start the app
        setContent {
            val dummyDataStoreService = DummyDataStoreService()
            val ks = KeystoreService(dummyDataStoreService)
            val walletMain = WalletMain(
                cryptoService = ks.let { runBlocking { WalletCryptoService(it.getSigner()) } },
                dataStoreService = dummyDataStoreService,
                platformAdapter = getPlatformAdapter(),
                scope =  CoroutineScope(Dispatchers.Default),
                buildContext = BuildContext(
                    buildType = "debug",
                    versionCode = 0,
                    versionName = "0.0.0",
                )
            )
            App(walletMain)
        }

        waitUntil {
            onNodeWithTag(NavigatorTestTags.loadingTestTag)
                .isNotDisplayed()
        }

        onNodeWithTag(OnboardingWrapperTestTags.onboardingStartScreen)
            .assertIsDisplayed()
    }

    @Test
    fun givenNewAppInstallation_whenStartingApp_thenShowsOnboardingStartButton() = runComposeUiTest() {
        // Start the app
        setContent {
            val dummyDataStoreService = DummyDataStoreService()
            val ks = KeystoreService(dummyDataStoreService)
            val walletMain = WalletMain(
                cryptoService = ks.let { runBlocking { WalletCryptoService(it.getSigner()) } },
                dataStoreService = dummyDataStoreService,
                platformAdapter = getPlatformAdapter(),
                scope =  CoroutineScope(Dispatchers.Default),
                buildContext = BuildContext(
                    buildType = "debug",
                    versionCode = 0,
                    versionName = "0.0.0",
                )
            )
            App(walletMain)
        }

        waitUntil {
            onNodeWithTag(NavigatorTestTags.loadingTestTag)
                .isNotDisplayed()
        }

        waitUntil {
            onNodeWithTag(OnboardingWrapperTestTags.onboardingStartScreen)
                .isDisplayed()
        }

        onNodeWithTag(OnboardingStartScreenTestTag.startButton)
            .assertIsDisplayed()
    }


    @Test
    fun givenNewAppInstallation_whenStartingApp_thenShowAttributesOnMyCredentialsScreen() = runComposeUiTest() {
        setContent {
            val dummyDataStoreService = DummyDataStoreService()
            val ks = KeystoreService(dummyDataStoreService)
            val walletMain = WalletMain(
                cryptoService = ks.let { runBlocking { WalletCryptoService(it.getSigner()) } },
                dataStoreService = dummyDataStoreService,
                platformAdapter = getPlatformAdapter(),
                scope =  CoroutineScope(Dispatchers.Default),
                buildContext = BuildContext(
                    buildType = "debug",
                    versionCode = 0,
                    versionName = "0.0.0",
                )
            )
            App(walletMain)

            val issuer = IssuerAgent()
            runBlocking {
                walletMain.holderAgent.storeCredential(
                    issuer.issueCredential(
                        CredentialToBeIssued.VcSd(getAttributes(),
                            Clock.System.now().plus(3600.minutes),
                            IdAustriaScheme,
                            walletMain.cryptoService.keyMaterial.publicKey
                        )
                    ).getOrThrow().toStoreCredentialInput()
                )
            }
        }
        runBlocking {
            onNodeWithText(getString(Res.string.button_label_start))
                .assertIsDisplayed()
            onNodeWithText(getString(Res.string.button_label_start)).performClick()
            onNodeWithText(getString(Res.string.button_label_continue))
                .assertIsDisplayed()
            onNodeWithText(getString(Res.string.button_label_continue)).performClick()
            onNodeWithText(getString(Res.string.button_label_accept))
                .assertIsDisplayed()
            onNodeWithText(getString(Res.string.button_label_accept)).performClick()
            waitUntilDoesNotExist(hasText(getString(Res.string.button_label_accept)), 10000)

            onNodeWithContentDescription(getString(Res.string.content_description_portrait)).assertHeightIsAtLeast(1.dp)
            onNodeWithText("XXXÉliás XXXTörőcsik").assertExists()
            onNodeWithText("11.10.1965").assertExists()

            onNodeWithText(getString(Res.string.button_label_details)).performClick()
            waitUntilExactlyOneExists(hasText(getString(Res.string.section_heading_age_data)))
            onNodeWithText("≥14").assertExists()
            onNodeWithText("≥16").assertExists()
            onNodeWithText("≥18").assertExists()
            onNodeWithText("≥21").assertExists()
            onNodeWithText("Testgasse 1a-2b/Stg. 3c-4d/D6").assertExists()
            onNodeWithText("0088 Testort A").assertExists()
        }
    }

    private fun getAttributes() : List<ClaimToBeIssued> {
        return listOf(
            ClaimToBeIssued(IdAustriaScheme.Attributes.BPK,"XFN+436920f:L9LBxmjNPt0041j5O1+sir0HOG0="),
            ClaimToBeIssued(IdAustriaScheme.Attributes.FIRSTNAME, "XXXÉliás"),
            ClaimToBeIssued(IdAustriaScheme.Attributes.LASTNAME, "XXXTörőcsik"),
            ClaimToBeIssued(IdAustriaScheme.Attributes.DATE_OF_BIRTH,"1965-10-11"),
            ClaimToBeIssued(IdAustriaScheme.Attributes.PORTRAIT,""),
            ClaimToBeIssued(IdAustriaScheme.Attributes.MAIN_ADDRESS, "ewoiR2VtZWluZGVrZW5uemlmZmVyIjoiMDk5ODgiLAoiR2VtZWluZGViZXplaWNobnVuZyI6IlRlc3RnZW1laW5kZSIsCiJQb3N0bGVpdHphaGwiOiIwMDg4IiwKIk9ydHNjaGFmdCI6IlRlc3RvcnQgQSIsCiJTdHJhc3NlIjoiVGVzdGdhc3NlIiwKIkhhdXNudW1tZXIiOiIxYS0yYiIsCiJTdGllZ2UiOiJTdGcuIDNjLTRkIiwKIlR1ZXIiOiJENiIKfQ=="),
            ClaimToBeIssued(IdAustriaScheme.Attributes.AGE_OVER_14, true),
            ClaimToBeIssued(IdAustriaScheme.Attributes.AGE_OVER_16, true),
            ClaimToBeIssued(IdAustriaScheme.Attributes.AGE_OVER_18, true),
            ClaimToBeIssued(IdAustriaScheme.Attributes.AGE_OVER_21, true),
        )
    }

    @OptIn(ExperimentalTestApi::class)
    @Test
    fun givenNewAppInstallation_whenStartingApp_thenLoadAttributesAndShowData() = runComposeUiTest() {
        setContent {
            val dummyDataStoreService = DummyDataStoreService()
            val ks = KeystoreService(dummyDataStoreService)
            val walletMain = WalletMain(
                cryptoService = ks.let { runBlocking { WalletCryptoService(it.getSigner()) } },
                dataStoreService = dummyDataStoreService,
                platformAdapter = getPlatformAdapter(),
                scope =  CoroutineScope(Dispatchers.Default),
                subjectCredentialStore = PersistentSubjectCredentialStore(dummyDataStoreService),
                buildContext = BuildContext(
                    buildType = "debug",
                    versionCode = 0,
                    versionName = "0.0.0",
                )
            )
            App(walletMain)

            val issuer = IssuerAgent()
            runBlocking {
                walletMain.holderAgent.storeCredential(
                    issuer.issueCredential(
                        CredentialToBeIssued.VcSd(getAttributes(),
                            Clock.System.now().plus(3600.minutes),
                            IdAustriaScheme,
                            walletMain.cryptoService.keyMaterial.publicKey,
                        )
                    ).getOrThrow().toStoreCredentialInput()
                )
            }

        }
        runBlocking {
            onNodeWithText(getString(Res.string.button_label_start))
                .assertIsDisplayed()
            onNodeWithText(getString(Res.string.button_label_start)).performClick()
            onNodeWithText(getString(Res.string.button_label_continue))
                .assertIsDisplayed()
            onNodeWithText(getString(Res.string.button_label_continue)).performClick()
            onNodeWithText(getString(Res.string.button_label_accept))
                .assertIsDisplayed()
            onNodeWithText(getString(Res.string.button_label_accept)).performClick()
            waitUntilDoesNotExist(hasText(getString(Res.string.button_label_accept)), 2000)

            val client = HttpClient()
            val response = client.post("https://apps.egiz.gv.at/customverifier/transaction/create") {
                contentType(ContentType.Application.Json)
                setBody(request)
            }.body<String>()
            val jsonObject = Json.parseToJsonElement(response).jsonObject
            val qrCodeUrl = jsonObject["qrCodeUrl"]?.jsonPrimitive?.content
            appLink.value = qrCodeUrl

            waitUntilExactlyOneExists(hasText(getString(Res.string.button_label_consent)), 2000)
            onNodeWithText(getString(Res.string.button_label_consent)).performClick()
        }
    }

}

val request = Json.encodeToString(RequestBody(
    "https://wallet.a-sit.at/mobile",
    listOf(Credential(
        "at.gv.id-austria.2023.1",
        "SD_JWT",
        listOf(
            "bpk",
            "firstname",
            "lastname",
            "date-of-birth",
            "portrait",
            "main-address",
            "age-over-18",
        )
    ))
))

@Serializable
data class RequestBody(val urlprefix: String, val credentials: List<Credential>)

@Serializable
data class Credential(val credentialType: String, val representation: String, val attributes: List<String>)

@Composable
expect fun getPlatformAdapter(): PlatformAdapter

